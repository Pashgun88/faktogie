import os
import openai
import asyncio
import aiohttp
import schedule
import time
from aiogram import Bot, Dispatcher
from dotenv import load_dotenv
import random

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
POST_TIMES = os.getenv("POST_TIMES", "08:00,12:00,18:00,21:00").split(",")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

TOPICS = ["–Ω–∞—É–∫–∞", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏—Å—Ç–æ—Ä–∏—è", "–∫–æ—Å–º–æ—Å", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–∏—Å–∫—É—Å—Å—Ç–≤–æ"]

async def generate_text():
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    prompt = (
        f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç –Ω–∞ —Ç–µ–º—É {random.choice(TOPICS)}. "
        "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º. "
        "–î–æ–±–∞–≤—å –ª—ë–≥–∫–∏–π —é–º–æ—Ä, –Ω–æ –∏–∑–±–µ–≥–∞–π —à—É—Ç–æ–∫, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –∞–Ω–µ–∫–¥–æ—Ç—ã. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã, –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç –∏ –æ—á–µ–≤–∏–¥–Ω—ã–µ —à—É—Ç–∫–∏. "
        "–§–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º, –±–µ–∑ —Å–ª–æ–≤ '–§–∞–∫—Ç:' –∏–ª–∏ '–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã...'. "
        "–í –∫–æ–Ω—Ü–µ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –æ—Å—Ç—Ä–æ—É–º–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ, –Ω–æ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –∑–≤—É—á–∞—Ç—å –æ—Ä–≥–∞–Ω–∏—á–Ω–æ."
    )

    payload = {"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": prompt}]}
    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.openai.com/v1/chat/completions", json=payload, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                text = data.get("choices")[0]["message"]["content"] if "choices" in data else None
                print(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
                return text
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {await response.text()}")
                return None

async def generate_image(prompt):
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {"model": "dall-e-3", "prompt": prompt, "size": "1024x1024"}
    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.openai.com/v1/images/generations", json=payload, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                if "data" in data:
                    image_url = data["data"][0]["url"]
                    print(f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
                    return image_url
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {await response.text()}")
            return None

async def check_grammar(text):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    return text

async def create_post():
    fact_text = await generate_text()
    fact_text = await check_grammar(fact_text)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    if not fact_text:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
        return

    image_url = await generate_image(fact_text)
    if not image_url:
        image_url = await generate_image("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç, –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞, –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞.")

    try:
        if image_url:
            await bot.send_photo(chat_id=CHANNEL_ID, photo=image_url, caption=f"üìù {fact_text}")
            print(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {fact_text}")
        else:
            await bot.send_message(chat_id=CHANNEL_ID, text=f"üìù {fact_text}\n‚ö†Ô∏è –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            print(f"‚ö†Ô∏è –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {fact_text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

def schedule_posts():
    for post_time in POST_TIMES:
        schedule.every().day.at(post_time.strip()).do(lambda: asyncio.run(create_post()))

def run_scheduler():
    schedule_posts()
    print("üìÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
    while True:
        schedule.run_pending()
        time.sleep(600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    asyncio.run(create_post())  # –í–º–µ—Å—Ç–æ schedule, –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É
    
