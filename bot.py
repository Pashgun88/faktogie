import os
import openai
import asyncio
import aiohttp
import schedule
import time
from aiogram import Bot, Dispatcher
from dotenv import load_dotenv
import random

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
POST_TIMES = os.getenv("POST_TIMES", "08:00,12:00,18:00,21:00").split(",")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

TOPICS = ["–Ω–∞—É–∫–∞", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏—Å—Ç–æ—Ä–∏—è", "–∫–æ—Å–º–æ—Å", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–∏—Å–∫—É—Å—Å—Ç–≤–æ"]

async def generate_text():
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    prompt = (
        f"–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, –Ω–æ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç –Ω–∞ —Ç–µ–º—É {random.choice(TOPICS)}. "
        "–ü–∏—à–∏ —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –±–µ–∑ '–§–∞–∫—Ç:' –≤ –Ω–∞—á–∞–ª–µ. "
        "–î–æ–±–∞–≤—å –ª—ë–≥–∫–∏–π —é–º–æ—Ä, —á—Ç–æ–±—ã –æ–Ω –∑–≤—É—á–∞–ª –Ω–µ –∫–∞–∫ –∞–Ω–µ–∫–¥–æ—Ç, –∞ –∫–∞–∫ –∑–∞–±–∞–≤–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ. "
        "–ò–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞, —Å–ª–æ–∂–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ –∏ –æ—á–µ–≤–∏–¥–Ω—ã—Ö —à—É—Ç–æ–∫."
    )
    payload = {
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "user", "content": prompt}]
    }
    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.openai.com/v1/chat/completions", json=payload, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                text = data.get("choices")[0]["message"]["content"] if "choices" in data else None
                print(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
                return text
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {await response.text()}")
                return None

async def generate_image(prompt):
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {"model": "dall-e-3", "prompt": prompt, "size": "1024x1024"}
    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.openai.com/v1/images/generations", json=payload, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                if "data" in data:
                    image_url = data["data"][0]["url"]
                    print(f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
                    return image_url
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {await response.text()}")
            return None

async def create_post():
    fact_text = await generate_text()
    if not fact_text:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
        return

    image_url = await generate_image(fact_text)
    if not image_url:
        image_url = await generate_image("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç, –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞, –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞.")

    try:
        if image_url:
            await bot.send_photo(chat_id=CHANNEL_ID, photo=image_url, caption=f"üìù {fact_text}")
            print(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {fact_text}")
        else:
            await bot.send_message(chat_id=CHANNEL_ID, text=f"üìù {fact_text}\n‚ö†Ô∏è –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            print(f"‚ö†Ô∏è –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {fact_text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

def schedule_posts():
    for post_time in POST_TIMES:
        schedule.every().day.at(post_time.strip()).do(lambda: asyncio.run(create_post()))

def run_scheduler():
    schedule_posts()
    print("üìÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
    while True:
        schedule.run_pending()
        time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    run_scheduler()
